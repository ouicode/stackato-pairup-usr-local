.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Vroom 3pm"
.TH Vroom 3pm "2011-10-12" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Vroom \- Slide Shows in Vim
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&    > mkdir MySlides    # Make a Directory for Your Slides
\&    > cd MySlides       # Go In There
\&    > vroom \-new        # Create Example Slides File
\&    > vim slides.vroom  # Edit the File and Add Your Own Slides
\&    > vroom \-\-vroom     # Show Your Slides
\&    > vroom \-\-html      # Publish Your Slides as HTML
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Ever given a Slide Show and needed to switch over to Vim?
.PP
Now you don't ever have to switch again. You're already there.
.PP
Vroom lets you create your slides in a single file using a Wiki-like
style, much like Spork and Sporx do. The difference is that your slides
don't compile to \s-1HTML\s0 or JavaScript or \s-1XUL\s0. They get turned into a set
of files that begin with '0', like '03' or '07c' or '05b.pl'.
.PP
The slides are named in alphabetic order. That means you can bring them
all into a Vim session with the command: \f(CW\*(C`vim 0*\*(C'\fR. \f(CW\*(C`vroom \-\-vroom\*(C'\fR
does exactly that.
.PP
You can do things like advance to the next slide with the spacebar.
Vroom creates a file called \f(CW\*(C`./.vimrc\*(C'\fR with helpful key mappings for
navigating a slideshow. See \*(L"\s-1KEY\s0 \s-1MAPPINGS\s0\*(R" below.
.PP
Please note that you will need the following line in your
\&\f(CW\*(C`$HOME/.vimrc\*(C'\fR file in order to pick up the local \f(CW\*(C`.vimrc\*(C'\fR file.
.PP
.Vb 1
\&    set exrc
.Ve
.PP
Vroom takes advantage of Vim's syntax highlighting. It also lets you run
slides that contain code.
.PP
Since Vim is an editor, you can change your slides during the show.
.SH "COMMAND USAGE"
.IX Header "COMMAND USAGE"
Vroom has a few command line options:
.IP "vroom \-\-new" 4
.IX Item "vroom --new"
Write an example \f(CW\*(C`slides.vroom\*(C'\fR file. This example contains all the
config options and also examples of all the Vroom syntax features.
.IP "vroom \-\-vroom" 4
.IX Item "vroom --vroom"
Compile (create) the slides files from the input file and start vim
show.
.IP "vroom \-\-compile" 4
.IX Item "vroom --compile"
Just compile the slides.
.IP "vroom \-\-html" 4
.IX Item "vroom --html"
Publish the slides to \s-1HTML\s0, with embedded JavaScript to navigate with
the spacebar and backspace keys. Created in the \f(CW\*(C`html/\*(C'\fR subdirectory.
.IP "vroom \-\-text" 4
.IX Item "vroom --text"
Publish the slides to plain text. This action uses all the text slides in
their unsplit form.  Created in the \f(CW\*(C`text/\*(C'\fR subdirectory.
.IP "vroom \-\-clean" 4
.IX Item "vroom --clean"
Clean up all the compiled output files.
.IP "vroom \-\-ghpublish" 4
.IX Item "vroom --ghpublish"
Creates a shell script in the current directory, that is intended to
publish your slides to the special GitHub branch called gh-pages. See
\&\*(L"\s-1GITHUB\s0 \s-1NOTES\s0\*(R" below.
.Sp
This command does \s-1NOT\s0 run the script. It merely creates it for you. It is up
to you to review the script and run it (if it makes sense on your system).
.IP "vroom <action> \-\-skip=#" 4
.IX Item "vroom <action> --skip=#"
The skip option takes a number as its input and skips that number of
files during compilation. This is useful when you are polishing your slides
and are finished with the first 50. You can say:
.Sp
.Vb 1
\&    vroom \-\-vroom \-\-skip=50
.Ve
.Sp
and it will start on slide #51.
.IP "vroom <action> \-\-input=<file_name>" 4
.IX Item "vroom <action> --input=<file_name>"
This option lets you specify an alternate input file name, instead of the
default one, \f(CW\*(C`slides.vroom\*(C'\fR.
.SH "INPUT FORMAT"
.IX Header "INPUT FORMAT"
Here is an example slides.vroom file:
.PP
.Vb 9
\&    \-\-\-\- config
\&    # These are YAML settings for Vroom
\&    title: My Spiffy Slideshow
\&    height: 84
\&    width: 20
\&    # skip: 12      # Skip 12 slides. Useful when making slides.
\&    # auto_size: 1  # Determines height/width automatically
\&    \-\-\-\- center
\&    My Presentation
\&
\&    by Ingy
\&    \-\-\-\-
\&    == Stuff I care about:
\&
\&    * Foo
\&    +* Bar
\&    +* Baz
\&    \-\-\-\- perl,i10
\&    # Perl code indented 10 spaces
\&    use Vroom;
\&
\&    print "Hello World";
\&    \-\-\-\- center
\&    THE END
.Ve
.PP
A line that starts with '==' is a header line. It will be centered.
.PP
Lines that begin with a '+' cause vroom to split the slide there,
causing an animation effect.
.SH "CONFIGURATION OPTIONS"
.IX Header "CONFIGURATION OPTIONS"
Each slide can have one or more configuration options. Options are
a comma separated list that follow the '\-\-\-\-' header for a slide.
Like this:
.PP
.Vb 6
\&    \-\-\-\- config
\&    \-\-\-\- center
\&    \-\-\-\- perl,i20
\&    \-\-\-\- include file\-name
\&    \-\-\-\- replace
\&    \-\-\-\- skip
.Ve
.IP "config" 4
.IX Item "config"
The slide is really a yaml configuration. It will not be displayed
in the presentation, but will tell vroom what to do from that point
forward.
.Sp
Usually, a \f(CW\*(C`config\*(C'\fR slide is the first thing in your input file, but
you can use more than one config slide.
.IP "center" 4
.IX Item "center"
Center the contents of the slide.
.IP "i##" 4
.IX Item "i##"
\&'i' followed by a number means to indent the contents by the number of
characters.
.IP "i\-##" 4
.IX Item "i-##"
\&'i' followed by a negative number means to strip that number of leading 
characters from the contents of the slide.  This can be useful if you need
to have characters special to Vroom at the beginning of your lines,
for example if the contents of your slide is unified diff output.
.IP "perl,ruby,python,php,javascript,haskell,actionscript,html,yaml,xml,json,make,shell,diff" 4
.IX Item "perl,ruby,python,php,javascript,haskell,actionscript,html,yaml,xml,json,make,shell,diff"
Specifies that the slide is one of those syntaxen, and that the
appropriate file extension will be used, thus causing vim to syntax
highlight the slide.
.IP "include file-path-name" 4
.IX Item "include file-path-name"
Replace the line with the contents of the specified file. Useful to
include long files that would make your slides file unruly.
.IP "replace" 4
.IX Item "replace"
With the \f(CW\*(C`replace\*(C'\fR option, the '+' animations in the slide cause the
content to replace the previous partial slide, rather than append to it.
.IP "skip" 4
.IX Item "skip"
Ignore the following slide completely.
.SS "\s-1CONFIG\s0 \s-1SLIDE\s0 \s-1OPTIONS\s0"
.IX Subsection "CONFIG SLIDE OPTIONS"
You can specify the following configuration options in a config slide:
.IP "title: <text>" 4
.IX Item "title: <text>"
The title of your presentation.
.IP "height: <number>" 4
.IX Item "height: <number>"
The number of lines in the terminal you plan to use when presenting the
show. Used for centering the content.
.IP "width: <number>" 4
.IX Item "width: <number>"
The number of columns in the terminal you plan to use when presenting
the show. Used for centering the content.
.IP "auto_size: <0|1>" 4
.IX Item "auto_size: <0|1>"
When set to 1, the height/width options above will be ignored and
determined each time you start the slideshow.
.IP "indent: <number>" 4
.IX Item "indent: <number>"
All slides will be indented by this number of spaces by default.
.IP "list_indent: <number>" 4
.IX Item "list_indent: <number>"
Auto detect slides that have lists in them, and indent them by the
specified number of columns.
.IP "vim: <name>" 4
.IX Item "vim: <name>"
You can specify the name of the vim executable to use. If you set this to
\&\f(CW\*(C`gvim\*(C'\fR special gvim support will be provided.
.IP "GVim options" 4
.IX Item "GVim options"
The following options are available, if your vim option is set to gvim.
.Sp
.Vb 4
\&    fuopt: maxhorz,maxvert
\&    guioptions: egmLtT
\&    guicursor: a:blinkon0\-ver25\-Cursor
\&    guifont: Bitstream_Vera_Sans_Mono:h18
.Ve
.Sp
These are all documented by gvim's help system. Please see that for more
information.
.SH "KEY MAPPINGS"
.IX Header "KEY MAPPINGS"
These are the standard key mappings specified in the local \f(CW\*(C`.vimrc\*(C'\fR.
.IP "<\s-1SPACE\s0>" 4
.IX Item "<SPACE>"
Advance one slide.
.IP "<\s-1BACKSPACE\s0>" 4
.IX Item "<BACKSPACE>"
Go back one slide.
.IP "??" 4
Bring up the help screen.
.IP "\s-1RR\s0 (or R \*(-- deprecated)" 4
.IX Item "RR (or R  deprecated)"
If the current slide is declared Perl, Python, Ruby, \s-1PHP\s0, Haskell or
JavaScript, then run it accordingly.
.IP "\s-1QQ\s0" 4
.IX Item "QQ"
Quit Vroom.
.IP "\s-1VV\s0" 4
.IX Item "VV"
Since these vim options apply while editing the \f(CW\*(C`slides.vroom\*(C'\fR file
(yes, beware), you can use this shortcut to launch Vroom on the current
contents whilst writing your slides.
.IP "\s-1EE\s0" 4
.IX Item "EE"
Edit the file that the cursor is on the filename of.
.Sp
You can put file path names in your slides, and then easily bring them
up during your presentation.
.IP "\s-1OO\s0" 4
.IX Item "OO"
On a Mac, run the \s-1OS\s0 X \f(CW\*(C`open\*(C'\fR command on the argument that your cursor is on.
.Sp
For instance, if you want to display an image, you could put the file
path of the image in your slide, then use \s-1OO\s0 to launch it.
.SH "CUSTOM CONFIGURATION"
.IX Header "CUSTOM CONFIGURATION"
You can create a file called \f(CW\*(C`.vroom/vimrc\*(C'\fR in your home directory. If
vroom sees this file, it will append it onto every local \f(CW\*(C`.vimrc\*(C'\fR file
it creates.
.PP
Use this file to specify your own custom vim settings for all your vroom
presentations.
.PP
You can also create a file called \f(CW\*(C`.vroom/gvimrc\*(C'\fR for gvim overrides,
if you are using gvim.
.SH "USING MacVim OR gvim"
.IX Header "USING MacVim OR gvim"
If you have a Mac, you really should try using MacVim for Vroom slide
shows. You can run it in fullscreen mode, and it looks kinda
professional.
.PP
To do this, set the vim option in your config section:
.PP
.Vb 1
\&    vim: gvim
.Ve
.PP
\&\s-1NOTE:\s0 On my Mac, I have gvim symlinked to mvim, which is a smart startup
      script that ships with MacVim. Ping me, if you have questions
      about this setup.
.SH "GITHUB NOTES"
.IX Header "GITHUB NOTES"
I(ngy) put all my public talks on github. I think it is an excellent way
to publish your slides and give people a url to review them. Here are
the things I do to make this work well:
.PP
1) I create a repository for every presentation I give. The name of
   the repo is of the form <topic>\-<event/time>\-talk. You can go to
   <http://github.com/ingydotnet/> and look for the repos ending
   with \f(CW\*(C`\-talk\*(C'\fR.
.PP
2) GitHub has a feature called gh-pages that you can use to create a
   website for each github repo. I use this feature to publish the html
   output of my talk. I do something like this:
.PP
.Vb 11
\&    vroom \-\-html
\&    mv html /tmp
\&    git branch gh\-pages
\&    git checkout gh\-pages
\&    rm \-r *.html
\&    mv /tmp/html/* .
\&    rmdir /tmp/html
\&    git add .
\&    git commit \-m \*(AqPublish my slides\*(Aq
\&    git push origin gh\-pages
\&    git checkout master
.Ve
.PP
2B) Vroom comes with a \f(CW\*(C`\-\-ghpublish\*(C'\fR option. If you run:
.PP
.Vb 1
\&    > vroom \-ghpublish
.Ve
.PP
it will generate a script called \f(CW\*(C`ghpublish\*(C'\fR that contains commands like the
ones above, to publish your slides to a gh-pages branch.
.PP
3) If my repo is called \f(CW\*(C`vroom\-yapcna2009\-talk\*(C'\fR, then after I publish
   the talk to the gh-pages branch, it will be available as
   <http://ingydotnet.github.com/vroom\-yapcna2009\-talk>.
   I then link this url from
   <http://github.com/ingydotnet/vroom\-yapcna2009\-talk> as the Homepage
   url.
.PP
You can see an example of a talk published to \s-1HTML\s0 and posted via gh-pages
at <http://ingydotnet.github.com/vroom\-pm/>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ingy do\*:t Net <ingy@ingy.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2008, 2009, 2010, 2011. Ingy do\*:t Net.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
See http://www.perl.com/perl/misc/Artistic.html
